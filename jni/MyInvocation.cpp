/* DO NOT EDIT THIS FILE - it is machine generated */
#include <MyInvocation.h>
#include <android/log.h>
#include <stdlib.h>

jclass g_objclass;
jobject g_obj;
JavaVM *g_JavaVM;
jmethodID g_mid_LoadX509Cert;
jmethodID g_mid_X509PrivateEncrypt;
jmethodID g_mid_X509PrivateDecrypt;

JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM *vm, void *reserved)
{
	g_JavaVM = vm;
	JNIEnv* env = NULL;
	jint result = -1;
	if (g_JavaVM) {
		LOGD("MyInvocation#JNI_OnLoad# Get JavaVM success");
	} else {
		LOGE("MyInvocation#JNI_OnLoad# Get JavaVM failed");
	}
	if (vm->GetEnv((void**) &env, JNI_VERSION_1_4) != JNI_OK) {
		return result;
	}
	return JNI_VERSION_1_4;
}

/*
 * Class:     com_example_invo_ServiceCtrl
 * Method:    start
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_example_invo_ServiceCtrl_start
  (JNIEnv *env, jobject obj)
{
	//objclass=evn->GetObjectClass(object);
	jclass tclass = env->FindClass("com/example/invo/ServiceCtrl");
	if (NULL == tclass)
	{
		LOGE("MyInvocation#FindClass failed");
		return;
	}

	jmethodID mid = env->GetMethodID(tclass, "callback", "(Ljava/lang/String;)V");
	if (NULL == mid)
	{
		LOGE("MyInvocation#GetMethodID failed");
		return;
	}

	jstring jstr = env->NewStringUTF("This String is from JNI!");

	env->CallVoidMethod(obj, mid, jstr);

	jthrowable exception = env->ExceptionOccurred();
	if (exception) {
		env->ExceptionDescribe();
	}

	return;
}

/*
 * Class:     com_example_invo_ServiceCtrl
 * Method:    initJavaObject
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_example_invo_ServiceCtrl_initJavaObject
  (JNIEnv *env, jobject object)
{

	// 保存Java对象实例
	g_obj=env->NewGlobalRef(object);
	if (NULL == g_obj)
	{
		LOGE("MyInvocation#NewGlobalRef failed!");
		return;
	}

	// 获取实例的class对象
	g_objclass=env ->GetObjectClass(object);
	if( NULL == g_objclass)
	{
		LOGE("MyInvocation#GetObjectClass failed!");
		env->DeleteGlobalRef(g_obj);
		return;
	}

	// 获取LoadX509Certificate方法id
	g_mid_LoadX509Cert = env->GetMethodID(g_objclass, "LoadX509Certificate", "()[B");
	if (NULL == g_mid_LoadX509Cert)
	{
		LOGE("MyInvocation#GetMethodID LoadX509Certificate failed!");
		env->DeleteGlobalRef(g_obj);
		return;
	}

	// 获取X509PrivateEncrypt方法id
	g_mid_X509PrivateEncrypt = env->GetMethodID(g_objclass, "X509PrivateEncrypt", "([B)[B");
	if (NULL == g_mid_X509PrivateEncrypt)
	{
		LOGE("MyInvocation# GetMethodID X509PrivateEncrypt failed!");
		env->DeleteGlobalRef(g_obj);
		return;
	}

	// 获取X509PrivateDecrypt方法id
	g_mid_X509PrivateDecrypt = env->GetMethodID(g_objclass, "X509PrivateDecrypt", "([B)[B");
	if (NULL == g_mid_X509PrivateEncrypt)
	{
		LOGE("MyInvocation# GetMethodID X509PrivateDecrypt failed!");
		env->DeleteGlobalRef(g_obj);
		return;
	}

	LOGD("MyInvocation#initJavaObject success");
}

